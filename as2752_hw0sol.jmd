---
title: "BEE 4750/5750 Homework 0"
author: "Akanksha Srivastava (as2752)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1 

## Problem 1.1
```julia
function square_number(x)
  output = x^2 
  return output
end
```

## Problem 1.2
```julia
square5 = square_number(5)
println("We can see that 5Ë†2 = $square5")
```

## Problem 1.3
```julia
squares = zeros(21)
for i in -10:10
  squares[i+11] = square_number(i)
end

x = -10:10
using Plots
plot(x, squares, label="Squares", xlabel="Integers", ylabel="Integer Squares")
```

# Problem 2

## Problem 2.1 - LATEX TYPSETTING?
```julia
println("If a > sqrt(x), then x/a < x/sqrt(x) or x/a < sqrt(x)")
println("If a < sqrt(x), then x/a > x/sqrt(x) or x/a > sqrt(x)")
println("In either case, sqrt(x) is larger than one of x/a and a and smaller than the other.")
```

## Problem 2.2
```julia
x = 2
aold = x
anew = 1
tol = 1e-6
while abs(aold-anew) > tol
  aold = anew
  anew = (x/aold + aold)/2
end

root = anew
```

# Problem 3

## Problem 3.1
```julia
my_vec = rand(20)
```

## Problem 3.2
```julia
function mean(vec)
  sum = 0
  for i in 1:length(vec)
    sum = sum + vec[i]
  end
  mean_value = sum / length(vec)
  return mean_value
end

rand_mean = mean(my_vec)

function demean(vec)
  vec_mean = mean(vec)
  vec_demean = zeros(length(vec))
  for i in 1:length(vec)
    vec_demean[i] = vec[i] - vec_mean
  end
  return vec_demean
end

rand_demean = demean(my_vec)
```

## Problem 3.3
```julia
vec_10 = zeros(10)
vec_10[3:8] = [1,1,1,1,1,1]
```

## Problem 3.4
```julia
mat5 = rand(5,5)
mat5_demean = zeros(5,5)
for i in 1:5
  mat5_demean[1:5,i] = demean(mat5[1:5,i])
end
```
# Problem 4

## Problem 4.1 - ADDING DISTRIBUTIONS
```julia
using Distributions
a = 0.4
q = 2
b = 0.42
mu = log(0.03)
sigma = 0.005
T = 100
ln_dist = LogNormal(mu,sigma)
yt = rand(ln_dist,100)
```

## Problem 4.2
```julia
function p_dynamics(a, yt, b, q, T, X0)
  X = zeros(T);
  X[1] = X0
  for i in 1:T-1
    X[i+1] = X[i] + a + yt[i] + X[i]^q/(1+X[i]^q) - b*X[i]
  end
  return X
end
```

## Problem 4.3 - WHAT IS X0?
```julia
X0 = 0
p_levels = p_dynamics(a, yt, b, q, T, X0)
years = 1:T
plot(year, p_levels, label="Phosphorus Levels", xlabel="Year", ylabel="Levels")
```

# References